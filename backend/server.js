const express=require("express"),cors=require("cors"),fs=require("fs"),path=require("path"),{spawn:spawn}=require("child_process"),{exec:exec}=require("child_process"),os=require("os"),{Client:Client}=require("ssh2"),jwt=require("jsonwebtoken"),bcrypt=require("bcryptjs"),archiver=require("archiver");require("dotenv").config();const{User:User,initializeDatabase:initializeDatabase}=require("./models/user"),app=express();app.use(cors()),app.use(express.json());const JWT_SECRET=process.env.JWT_SECRET||"fallback_key";initializeDatabase();const authenticateToken=(e,s,t)=>{const r=e.headers.authorization,a=r&&r.split(" ")[1];if(!a)return s.sendStatus(401);jwt.verify(a,JWT_SECRET,(r,a)=>{if(r)return s.sendStatus(403);e.user=a,t()})};app.post("/api/register",authenticateToken,async(e,s)=>{const{username:t,password:r}=e.body;if(!t||!r)return s.status(400).json({error:"Username and password are required."});try{if(await User.findOne({where:{username:t}}))return s.status(400).json({error:"Usuário já existe."});const e=await User.create({username:t,password:r});s.status(201).json({message:"User successfully registered!",userId:e.id})}catch(e){console.error("Error registering user:",e),s.status(500).json({error:"Internal error when registering user."})}}),app.post("/api/login",async(e,s)=>{const{username:t,password:r}=e.body;try{const e=await User.findOne({where:{username:t}});if(!e)return s.status(401).json({error:"Invalid credentials."});if(!await bcrypt.compare(r,e.password))return s.status(401).json({error:"Invalid credentials."});const a=jwt.sign({userId:e.id,username:e.username},JWT_SECRET,{expiresIn:"8h"});s.json({message:"Login successful!",token:a})}catch(e){console.error("Login error:",e),s.status(500).json({error:"Internal error when logging in."})}});const activeProcesses=new Map;function generateRandomKey(e=10){const s="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";let t="";for(let r=0;r<e;r++)t+=s.charAt(Math.floor(36*Math.random()));return t}function formatDateTime(){return(new Date).toISOString().replace(/[-T:]/g,"").replace(/\..+/,"").slice(0,14)}function generateStandardizedFilename(e,s,t=null){const r=(e||"device").replace(/[^a-zA-Z0-9]/g,"_"),a=generateRandomKey(6),i=t||generateRandomKey(8),o=formatDateTime();return{filename:`${r}_${a}_${i}_${o}.${s}`,fileKey:a,projectKey:i,dateTime:o}}function generateCSVHeaders(e,s,t,r,a){let i=[];for(const a of e)switch(a.type){case"log":i.push("log_message");break;case"cpu":s&&(s.usr&&i.push("cpu_usr"),s.nice&&i.push("cpu_nice"),s.sys&&i.push("cpu_sys"),s.iowait&&i.push("cpu_iowait"),s.soft&&i.push("cpu_soft"),s.irq&&i.push("cpu_irq"),s.steal&&i.push("cpu_steal"),s.guest&&i.push("cpu_guest"),s.gnice&&i.push("cpu_gnice"),s.idle&&i.push("cpu_idle"));break;case"memory":t&&(t.total&&i.push("mem_total"),t.used&&i.push("mem_used"),t.free&&i.push("mem_free"),t.shared&&i.push("mem_shared"),t.buffCache&&(i.push("mem_cached"),i.push("mem_buffer"),i.push("mem_swap")),t.available&&i.push("mem_available"));break;case"disk":r&&(r.deviceName&&i.push("disk_device"),r.partitionTotalSize&&i.push("disk_total_size"),r.partitionUsedSpace&&i.push("disk_used_space"),r.partitionAvailableSpace&&i.push("disk_available_space"),r.partitionUsedPercent&&i.push("disk_used_percent"),r.mountPoint&&i.push("disk_mount_point"));break;case"zombies":i.push("zombie_processes");break;case"networkPing":i.push("ping_status"),i.push("ping_host"),i.push("ping_bytes"),i.push("ping_ttl"),i.push("ping_time_ms"),i.push("ping_sequence");break;case"service":i.push("service_cpu"),i.push("service_mem"),i.push("service_vsz"),i.push("service_rss"),i.push("service_threads"),i.push("service_swap")}return i.push("datetime"),i.join(";")}function writeCSVData(e,s,t=!1){try{return t?fs.writeFileSync(e,s+"\n"):fs.appendFileSync(e,s+"\n"),!0}catch(s){return console.error(`Error writing CSV data to ${e}:`,s),!1}}function initializeCSVFile(e,s,t,r,a,i){return writeCSVData(e,generateCSVHeaders(s,t,r,a,i),!0)}function executeLocalScript(e,s,t,r){const a=e.replace(/\\/g,"/"),i=spawn("bash",[a]);let o=[],n=[];activeProcesses.set(s,{process:i,logPath:r,outputBuffer:o,stderrBuffer:n,timestamp:Date.now(),isCancelled:!1,isRemote:!1}),i.stdout.on("data",e=>{const a=e.toString(),i=activeProcesses.get(s);if(i&&!i.isCancelled){o.push(a);a.trim().split("\n").forEach(e=>{e.includes(";")&&""!==e.trim()&&writeCSVData(r,e.trim(),!1)}),t.write(JSON.stringify({type:"stdout",data:a,sessionId:s})+"\n")}}),i.stderr.on("data",e=>{const r=e.toString(),a=activeProcesses.get(s);a&&!a.isCancelled&&(n.push(r),t.write(JSON.stringify({type:"stderr",data:r,sessionId:s})+"\n"))}),i.on("close",e=>{const a=activeProcesses.get(s);if(!a)return;const i=a.isCancelled?"cancelled":0===e?"completed":"failed";t.write(JSON.stringify({type:"complete",status:i,output:o.join(""),stderr:n.join(""),sessionId:s,logPath:r})+"\n"),t.end(),activeProcesses.delete(s)})}function executeRemoteScript(e,s,t,r,a){let i=[],o=[];activeProcesses.set(t,{sshConfig:e,scriptPath:s,logPath:a,outputBuffer:i,stderrBuffer:o,timestamp:Date.now(),isCancelled:!1,isRemote:!0});const n=new Client;n.on("ready",()=>{r.write(JSON.stringify({type:"stdout",data:"",sessionId:t})+"\n");const e=fs.readFileSync(s,"utf8");n.exec("bash -s",(s,c)=>{if(s)return o.push(`SSH execution error: ${s.message}`),r.write(JSON.stringify({type:"stderr",data:`SSH execution error: ${s.message}`,sessionId:t})+"\n"),void n.end();c.stdin.write(e),c.stdin.end(),c.on("data",e=>{const s=e.toString(),o=activeProcesses.get(t);if(o&&!o.isCancelled){i.push(s);s.trim().split("\n").forEach(e=>{e.includes(";")&&""!==e.trim()&&writeCSVData(a,e.trim(),!1)}),r.write(JSON.stringify({type:"stdout",data:s,sessionId:t})+"\n")}}),c.stderr.on("data",e=>{const s=e.toString(),a=activeProcesses.get(t);a&&!a.isCancelled&&(o.push(s),r.write(JSON.stringify({type:"stderr",data:s,sessionId:t})+"\n"))}),c.on("close",e=>{const s=activeProcesses.get(t);if(!s)return;const c=s.isCancelled?"cancelled":0===e?"completed":"failed";r.write(JSON.stringify({type:"complete",status:c,output:i.join(""),stderr:o.join(""),sessionId:t,logPath:a})+"\n"),r.end(),n.end(),activeProcesses.delete(t)})})}),n.on("error",e=>{o.push(`SSH connection error: ${e.message}`),r.write(JSON.stringify({type:"stderr",data:`SSH connection error: ${e.message}`,sessionId:t})+"\n"),r.write(JSON.stringify({type:"complete",status:"failed",output:i.join(""),stderr:o.join(""),sessionId:t,logPath:a})+"\n"),r.end(),activeProcesses.delete(t)}),n.connect({host:e.host,port:22,username:e.username,password:e.password,readyTimeout:5e3})}function inferHeadersFromScript(e){const s=[];return e.includes("cpu=$(mpstat")&&(e.includes("usr=$(echo $cpu")&&s.push("cpu_usr"),e.includes("nice=$(echo $cpu")&&s.push("cpu_nice"),e.includes("sys=$(echo $cpu")&&s.push("cpu_sys"),e.includes("iowait=$(echo $cpu")&&s.push("cpu_iowait"),e.includes("soft=$(echo $cpu")&&s.push("cpu_soft"),e.includes("irq=$(echo $cpu")&&s.push("cpu_irq"),e.includes("steal=$(echo $cpu")&&s.push("cpu_steal"),e.includes("guest=$(echo $cpu")&&s.push("cpu_guest"),e.includes("gnice=$(echo $cpu")&&s.push("cpu_gnice"),e.includes("idle=$(echo $cpu")&&s.push("cpu_idle")),e.includes("mem=$(free")&&(e.includes("total=$(echo $mem")&&s.push("mem_total"),e.includes("used=$(echo $mem")&&s.push("mem_used"),e.includes("free_mem=$(echo $mem")&&s.push("mem_free"),e.includes("shared=$(echo $mem")&&s.push("mem_shared"),e.includes("cached=$(cat /proc/meminfo")&&(s.push("mem_cached"),s.push("mem_buffer"),s.push("mem_swap")),e.includes("available=$(echo $mem")&&s.push("mem_available")),e.includes("disk=$( df")&&(e.includes("deviceName=$(echo $disk")&&s.push("disk_device"),e.includes("partitionTotalSize=$(echo $disk")&&s.push("disk_total_size"),e.includes("partitionUsedSpace=$(echo $disk")&&s.push("disk_used_space"),e.includes("partitionAvailableSpace=$(echo $disk")&&s.push("disk_available_space"),e.includes("partitionUsedPercent=$(echo $disk")&&s.push("disk_used_percent"),e.includes("mountPoint=$(echo $disk")&&s.push("disk_mount_point")),e.includes("ps aux | awk")&&e.includes("zombies")&&s.push("zombie_processes"),e.includes("ping -c 1")&&(s.push("ping_status"),s.push("ping_host"),s.push("ping_bytes"),s.push("ping_ttl"),s.push("ping_time_ms"),s.push("ping_sequence")),e.includes("pgrep -f")&&e.includes("pidstat")&&(s.push("service_cpu"),s.push("service_mem"),s.push("service_vsz"),s.push("service_rss"),s.push("service_threads"),s.push("service_swap")),e.includes('echo "')&&!s.length&&s.push("log_message"),s.push("datetime"),s.length>1?s.join(";"):null}function generateScriptFromNodes(e,s,t,r,a,i,o){const n=["#!/bin/bash\n"],c=[],p=new Set;const u=e.find(e=>"start"===e.type);let d=u?.data?.duration||"60",l=u?.data?.interval||"2",h=u?.data?.infinity||!1;u&&function t(r){if(p.has(r))return;p.add(r);const a=e.find(e=>e.id===r);if(a){c.push(a);s.filter(e=>e.source===r).forEach(e=>t(e.target))}}(u.id);let m=!1,f=!1,_=!1,$=!1,g=!1,y=!1,v=!1,S="8.8.8.8",w="",j="";for(const e of c)switch(e.type){case"cpu":m=!0;break;case"memory":f=!0;break;case"disk":_=!0;break;case"zombies":$=!0;break;case"networkPing":g=!0,S=e.data?.address||"8.8.8.8";break;case"service":y=!0,w=e.data?.serviceName||"";break;case"log":v=!0,j=e.data?.message||""}for(const e of c)switch(e.type){case"device":{e.data?.infinity?n.push(`\nINTERVAL=${e.data?.interval}\n\ninitial_time=$(date +%s)\n\nwhile true; do  \n`):e.data?.interval&&e.data?.duration?n.push(`\nTOTAL_TIME=${e.data?.duration}\nINTERVAL=${e.data?.interval}\n\ninitial_time=$(date +%s)\n\nwhile true; do  \n\ntempo_atual=$(date +%s)\nif (( tempo_atual - initial_time >= TOTAL_TIME + 1 )); then\n    break\nfi  \n`):h?n.push(`\nINTERVAL=${l}\n\ninitial_time=$(date +%s)\n\nwhile true; do  \n`):n.push(`\nTOTAL_TIME=${d}\nINTERVAL=${l}\n\ninitial_time=$(date +%s)\n\nwhile true; do  \n\ntempo_atual=$(date +%s)\nif (( tempo_atual - initial_time >= TOTAL_TIME + 1 )); then\n    break\nfi  \n`),n.push('  date_time=$(date +"%Y-%m-%d %H:%M:%S")');const s=[];m&&r&&(n.push("  cpu=$(mpstat | grep all)"),r.usr&&(n.push("  cpu_usr=$(echo $cpu | awk '{print $3}')"),s.push("$cpu_usr")),r.nice&&(n.push("  cpu_nice=$(echo $cpu | awk '{print $4}')"),s.push("$cpu_nice")),r.sys&&(n.push("  cpu_sys=$(echo $cpu | awk '{print $5}')"),s.push("$cpu_sys")),r.iowait&&(n.push("  cpu_iowait=$(echo $cpu | awk '{print $6}')"),s.push("$cpu_iowait")),r.soft&&(n.push("  cpu_soft=$(echo $cpu | awk '{print $8}')"),s.push("$cpu_soft")),r.irq&&(n.push("  cpu_irq=$(echo $cpu | awk '{print $9}')"),s.push("$cpu_irq")),r.steal&&(n.push("  cpu_steal=$(echo $cpu | awk '{print $10}')"),s.push("$cpu_steal")),r.guest&&(n.push("  cpu_guest=$(echo $cpu | awk '{print $11}')"),s.push("$cpu_guest")),r.gnice&&(n.push("  cpu_gnice=$(echo $cpu | awk '{print $12}')"),s.push("$cpu_gnice")),r.idle&&(n.push("  cpu_idle=$(echo $cpu | awk '{print $14}')"),s.push("$cpu_idle"))),f&&a&&(n.push("  mem=$(free | grep Mem)"),a.total&&(n.push("  mem_total=$(echo $mem | awk '{print $2}')"),s.push("$mem_total")),a.used&&(n.push("  mem_used=$(echo $mem | awk '{print $3}')"),s.push("$mem_used")),a.free&&(n.push("  mem_free=$(echo $mem | awk '{print $4}')"),s.push("$mem_free")),a.shared&&(n.push("  mem_shared=$(echo $mem | awk '{print $6}')"),s.push("$mem_shared")),a.buffCache&&(n.push("  mem_cached=$(cat /proc/meminfo | grep -i Cached | sed -n '1p' | awk '{print $2}')\n  mem_buffer=$(cat /proc/meminfo | grep -i Buffers | awk '{print $2}')\n  mem_swap=$(cat /proc/meminfo | grep -i Swap | grep -i Free | awk '{print $2}')"),s.push("$mem_cached"),s.push("$mem_buffer"),s.push("$mem_swap")),a.available&&(n.push("  mem_available=$(echo $mem | awk '{print $7}')"),s.push("$mem_available"))),_&&i&&(n.push("  disk=$(df | grep '/$')"),i.deviceName&&(n.push("  disk_device=$(echo $disk | awk '{print $1}')"),s.push("$disk_device")),i.partitionTotalSize&&(n.push("  disk_total_size=$(echo $disk | awk '{print $2}')"),s.push("$disk_total_size")),i.partitionUsedSpace&&(n.push("  disk_used_space=$(echo $disk | awk '{print $3}')"),s.push("$disk_used_space")),i.partitionAvailableSpace&&(n.push("  disk_available_space=$(echo $disk | awk '{print $4}')"),s.push("$disk_available_space")),i.partitionUsedPercent&&(n.push("  disk_used_percent=$(echo $disk | awk '{print $5}')"),s.push("$disk_used_percent")),i.mountPoint&&(n.push("  disk_mount_point=$(echo $disk | awk '{print $6}')"),s.push("$disk_mount_point"))),$&&(n.push("  zombie_processes=$(ps aux | awk '{if ($8~\"Z\"){print $0}}' | wc -l)"),s.push("$zombie_processes")),g&&(n.push(`  ping_result=$(ping -c 1 ${S} 2>&1)\n  ping_status=$?\n\n  if [ $ping_status -eq 0 ]; then\n    ping_time_ms=$(echo "$ping_result" | grep "time=" | awk -F"time=" '{print $2}' | awk '{print $1}')\n    ping_ttl=$(echo "$ping_result" | grep "ttl=" | awk -F"ttl=" '{print $2}' | awk '{print $1}')\n    ping_bytes=$(echo "$ping_result" | grep "bytes from" | awk '{print $1}')\n    ping_host=$(echo "$ping_result" | grep "bytes from" | awk '{print $4}' | sed 's/://')\n    ping_status_text="success"\n    ping_sequence="1"\n  else\n    ping_time_ms="0"\n    ping_ttl="0"\n    ping_bytes="0"\n    ping_host="${S}"\n    ping_status_text="failed"\n    ping_sequence="1"\n  fi`),s.push("$ping_status_text"),s.push("$ping_host"),s.push("$ping_bytes"),s.push("$ping_ttl"),s.push("$ping_time_ms"),s.push("$ping_sequence")),y&&w&&(n.push(`  service_id=$(pgrep -f ${w} | awk 'NR==1 {print}')\n\n  if [ -n "$service_id" ]; then\n    service_data=$(pidstat -u -h -p "$service_id" -T ALL -r 1 1 | sed -n '4p')\n    service_cpu=$(echo "$service_data" | awk '{print $8}')\n    service_mem=$(echo "$service_data" | awk '{print $14}')\n    service_vsz=$(echo "$service_data" | awk '{print $12}')\n    service_rss=$(echo "$service_data" | awk '{print $13}')\n    service_threads=$(cat /proc/"$service_id"/status | grep Threads | awk '{print $2}')\n    service_swap=$(cat /proc/"$service_id"/status | grep Swap | awk '{print $2}')\n  else\n    service_cpu="0"\n    service_mem="0"\n    service_vsz="0"\n    service_rss="0"\n    service_threads="0"\n    service_swap="0"\n  fi`),s.push("$service_cpu"),s.push("$service_mem"),s.push("$service_vsz"),s.push("$service_rss"),s.push("$service_threads"),s.push("$service_swap")),v&&s.unshift(`"${j}"`),s.push("$date_time"),s.length>0&&n.push(`  echo "${s.join(";")}"`);break}case"comment":{const s=e.data?.comment||"";n.push(s?`# "${s}"`:"# --- Message not defined ---");break}case"variable":{const s=e.data?.nameVariable||"VAR",t=e.data?.valueVariable||"0";n.push(`${s}=${t}`);break}case"finish":n.push("\n  sleep $INTERVAL\n\ndone\n")}return n.join("\n")}app.get("/api/csv/:filename",authenticateToken,(e,s)=>{const{filename:t}=e.params,r=path.join(__dirname,"logs"),a=path.join(r,t);fs.access(a,fs.constants.R_OK,e=>{if(e)return s.status(404).json({error:"Arquivo CSV não encontrado."});fs.readFile(a,"utf8",(e,t)=>{if(e)return s.status(500).json({error:"Falha ao ler o CSV."});s.setHeader("Content-Type","text/plain"),s.send(t)})})}),app.post("/api/generate",authenticateToken,async(e,s)=>{const{nodes:t,edges:r,cpuState:a,memoryState:i,diskState:o,serviceState:n}=e.body,c=t.find(e=>"start"===e.type);if(!c)return s.status(400).json({error:"Start node is missing"});const p=r.filter(e=>e.source===c.id),u=path.join(__dirname,"logs");fs.existsSync(u)||fs.mkdirSync(u);const d=[],l=e.body.projectKey?.trim().replace(/[^a-zA-Z0-9-_]/g,"_")||generateRandomKey(8);for(let m=0;m<p.length;m++){const f=p[m],_=t.find(e=>e.id===f.target&&"device"===e.type);if(!_)continue;const $=_.id,g=_.data,y=g.name||$,v=!!g.isRemote||Boolean(g.sshIp),S={host:g.sshIp||"",username:g.sshUser||"",password:g.sshPassword||""},w=new Set,j=[],k=[];function h(e){if(w.has(e))return;w.add(e);const s=t.find(s=>s.id===e);s&&j.push(s);const a=r.filter(s=>s.source===e);for(const e of a)k.push(e),h(e.target)}j.push(c),k.push(f),h($);const b=generateStandardizedFilename(y,"sh",l),T=path.join(u,b.filename),C=T.replace(/\\/g,"/"),I=generateScriptFromNodes(j,k,g,a,i,o,n);if(fs.writeFileSync(T,I,{mode:493}),v){const P=new Client,N=`/tmp/${b.filename}`;await new Promise((e,s)=>{P.on("ready",()=>{P.sftp((t,r)=>{if(t)return s(t);const a=fs.createReadStream(T),i=r.createWriteStream(N);i.on("close",()=>{P.end(),e()}),i.on("error",e=>{P.end(),s(e)}),a.pipe(i)})}).on("error",e=>s(e)).connect({host:S.host,port:22,username:S.username,password:S.password,readyTimeout:5e3})}),d.push({deviceId:$,deviceName:y,script:I,scriptPath:C,remotePath:N,filename:b.filename,fileKey:b.fileKey,projectKey:b.projectKey})}else d.push({deviceId:$,deviceName:y,script:I,scriptPath:C,filename:b.filename,fileKey:b.fileKey,projectKey:b.projectKey});console.log({deviceId:$,deviceName:y,script:I,scriptPath:C,filename:b.filename})}s.json({scripts:d})}),app.post("/api/execute",authenticateToken,async(e,s)=>{const{nodes:t,edges:r,cpuState:a,memoryState:i,diskState:o,serviceState:n}=e.body,c=t.find(e=>"start"===e.type);if(!c)return s.status(400).json({error:"Start node is missing"});const p=r.filter(e=>e.source===c.id),u=path.join(__dirname,"logs");fs.existsSync(u)||fs.mkdirSync(u);const d=[],l=e.body.projectKey?.trim().replace(/[^a-zA-Z0-9-_]/g,"_")||generateRandomKey(8);for(let m=0;m<p.length;m++){const f=p[m],_=t.find(e=>e.id===f.target&&"device"===e.type);if(!_)continue;const $=_.id,g=_.data,y=g.name||$,v=!!g.isRemote||Boolean(g.sshIp),S={host:g.sshIp||"",username:g.sshUser||"",password:g.sshPassword||""},w=new Set,j=[],k=[];function h(e){if(w.has(e))return;w.add(e);const s=t.find(s=>s.id===e);s&&j.push(s);const a=r.filter(s=>s.source===e);for(const e of a)k.push(e),h(e.target)}j.push(c),k.push(f),h($);const b=generateStandardizedFilename(y,"sh",l),T=path.join(u,b.filename),C=T.replace(/\\/g,"/"),I=b.filename.replace(".sh",".csv"),P=path.join(u,I);initializeCSVFile(P,j,a,i,o,n);const N=generateScriptFromNodes(j,k,g,a,i,o,n);fs.writeFileSync(T,N,{mode:493}),d.push({deviceId:$,deviceName:y,script:N,scriptPath:C,logPath:P,remotePath:v?`/tmp/${b.filename}`:null,isRemote:v,sshConfig:S,filename:b.filename,fileKey:b.fileKey,projectKey:b.projectKey})}s.setHeader("Content-Type","application/json"),s.setHeader("Transfer-Encoding","chunked");for(const E of d){const{deviceId:x,deviceName:q,scriptPath:z,script:F,logPath:R,remotePath:A,isRemote:K,sshConfig:O,filename:D}=E,V=`${x}-${Date.now()}`;s.write(JSON.stringify({message:`Running script for ${q}`,sessionId:V,script:F,deviceName:q,filename:D})+"\n"),K?executeRemoteScript(O,z,V,s,R):executeLocalScript(z,V,s,R)}}),app.post("/api/save-script",authenticateToken,(e,s)=>{const{sessionId:t,script:r,nameFile:a,deviceName:i}=e.body;if(!t||!r)return s.status(400).json({error:"Missing sessionId or script"});let o;if(a)o=path.join(__dirname,"logs",`${a}.sh`);else{const e=generateStandardizedFilename(i||"device","sh");o=path.join(__dirname,"logs",e.filename)}fs.writeFile(o,r,e=>{if(e)return console.error("Erro ao salvar o script:",e),s.status(500).json({error:"Erro ao salvar o arquivo"});s.status(200).json({message:"Script salvo com sucesso!",filename:path.basename(o)})})}),app.post("/api/cancel",authenticateToken,(e,s)=>{const{sessionId:t}=e.body;if(!t||!activeProcesses.has(t))return s.status(404).json({error:"Process not found or already completed"});const r=activeProcesses.get(t);r.isCancelled=!0,r.isRemote?s.json({message:"Remote process cancellation requested",output:r.outputBuffer.join(""),logPath:r.logPath}):(r.process.kill("SIGTERM"),setTimeout(()=>{activeProcesses.has(t)&&!r.process.killed&&r.process.kill("SIGKILL"),s.json({message:"Process cancelled successfully",output:r.outputBuffer.join(""),logPath:r.logPath})},500))}),app.post("/api/run-script",authenticateToken,(e,s)=>{const{nameFile:t,deviceConfig:r,nodes:a,cpuState:i,memoryState:o,diskState:n,serviceState:c}=e.body,p=t.split("_")[0]||"device",u=`${p}-${Date.now()}`,d=path.join(__dirname,"logs",`${t}.sh`),l=t.replace(/\.sh$/,"")+".csv",h=path.join(__dirname,"logs",l);if(a&&Array.isArray(a)&&a.length>0){initializeCSVFile(h,a,i||{},o||{},n||{},c||{})}else{console.log(`Warning: No nodes data provided for ${t}, attempting to create generic headers`);try{const e=inferHeadersFromScript(fs.readFileSync(d,"utf8"));e&&writeCSVData(h,e,!0)}catch(e){console.error("Error reading script or creating headers:",e),writeCSVData(h,"data;datetime",!0)}}const m=!!r?.isRemote,f={host:r?.sshIp||"",username:r?.sshUser||"",password:r?.sshPassword||""};s.setHeader("Content-Type","application/json"),s.setHeader("Transfer-Encoding","chunked");try{const e=fs.readFileSync(d,"utf8");s.write(JSON.stringify({sessionId:u,script:e,message:`Starting ${t}`,deviceName:p})+"\n")}catch(e){console.error("Error reading script file:",e),s.write(JSON.stringify({sessionId:u,message:`Error reading script file: ${e.message}`,deviceName:p})+"\n")}m?executeRemoteScript(f,d,u,s,h):executeLocalScript(d,u,s,h)}),app.post("/api/run-all-scripts",authenticateToken,(e,s)=>{const{scriptsConfig:t}=e.body;s.setHeader("Content-Type","application/json"),s.setHeader("Transfer-Encoding","chunked");for(const e of t){const{nameFile:t,deviceConfig:r,nodes:a,cpuState:i,memoryState:o,diskState:n,serviceState:c}=e,p=t.split("_")[0]||"device",u=`${p}-${Date.now()}`,d=path.join(__dirname,"logs",`${t}.sh`),l=t.replace(/\.sh$/,"")+".csv",h=path.join(__dirname,"logs",l);if(a&&Array.isArray(a)&&a.length>0){initializeCSVFile(h,a,i||{},o||{},n||{},c||{})}else{console.log(`Warning: No nodes data provided for ${t}, attempting to create generic headers`);try{const e=inferHeadersFromScript(fs.readFileSync(d,"utf8"));e&&writeCSVData(h,e,!0)}catch(e){console.error("Error reading script or creating headers:",e),writeCSVData(h,"data;datetime",!0)}}const m=!!r?.isRemote,f={host:r?.sshIp||"",username:r?.sshUser||"",password:r?.sshPassword||""};s.write(JSON.stringify({sessionId:u,message:`Starting ${t}`,deviceName:p})+"\n"),m?executeRemoteScript(f,d,u,s,h):executeLocalScript(d,u,s,h)}}),app.post("/api/execute-script-file",authenticateToken,(e,s)=>{const{nameFile:t,deviceConfig:r,nodes:a,cpuState:i,memoryState:o,diskState:n,serviceState:c}=e.body,p=Date.now().toString(),u=path.join(__dirname,"logs",`${t}.sh`),d=t.replace(/\.sh$/,"")+".csv",l=path.join(__dirname,"logs",`${d}`);if(a&&Array.isArray(a)&&a.length>0){initializeCSVFile(l,a,i||{},o||{},n||{},c||{})}else try{const e=inferHeadersFromScript(fs.readFileSync(u,"utf8"));e&&writeCSVData(l,e,!0)}catch(e){console.error("Error creating headers:",e),writeCSVData(l,"data;datetime",!0)}const h={isRemote:!!r?.isRemote||Boolean(r?.sshIp),host:r?.sshIp||"",username:r?.sshUser||"",password:r?.sshPassword||""};s.setHeader("Content-Type","application/json"),s.setHeader("Transfer-Encoding","chunked"),s.write(JSON.stringify({sessionId:p})+"\n"),h.isRemote?executeRemoteScript(h,u,p,s,l):executeLocalScript(u,p,s,l)}),app.post("/api/save-project",authenticateToken,(e,s)=>{const{nodes:t,edges:r,collapsedFlows:a,positionsBackup:i,csvData:o,csvPollingInterval:n,fileNames:c,outputContents:p,scriptContents:u,cpuState:d,memoryState:l,diskState:h,serviceState:m,projectName:f}=e.body,_=e.body.projectKey?.trim().replace(/[^a-zA-Z0-9-_]/g,"_")||generateRandomKey(8),$=e.user.userId,g=path.join(__dirname,"saves",$,_);fs.existsSync(g)||fs.mkdirSync(g,{recursive:!0}),console.log(`Salvando projeto ${_} - sobrescrevendo arquivos existentes...`);for(const e in c){const s=c[e],t=s.split("_")[0]||"device",r=`${t}.sh`,a=`${t}.csv`,i=path.join(__dirname,"logs",`${s}.sh`),n=path.join(__dirname,"logs",`${s}.csv`),p=path.join(g,r),d=path.join(g,a);if(fs.existsSync(i)?(console.log(`Copiando ${i} para ${p}`),fs.copyFileSync(i,p)):u[e]&&(console.log(`Criando novo arquivo .sh em ${p} a partir do conteúdo do script`),fs.writeFileSync(p,u[e],{mode:493})),fs.existsSync(n))console.log(`Copiando ${n} para ${d}`),fs.copyFileSync(n,d);else if(o[e]&&Array.isArray(o[e])&&o[e].length>0){console.log(`Criando novo arquivo .csv em ${d} a partir dos dados CSV`);const s=o[e],t=Object.keys(s[0]),r=[t.join(";"),...s.map(e=>t.map(s=>e[s]??"").join(";"))].join("\n");fs.writeFileSync(d,r)}}const y=path.join(g,`project_${_}.json`);console.log(`Sobrescrevendo arquivo JSON do projeto em ${y}`),fs.writeFileSync(y,JSON.stringify({projectName:f,projectKey:_,nodes:t,edges:r,collapsedFlows:a,positionsBackup:i,csvData:o,csvPollingInterval:n,fileNames:c,outputContents:p,scriptContents:u,cpuState:d,memoryState:l,diskState:h,serviceState:m,lastSaved:(new Date).toISOString()},null,2));try{const e=fs.readdirSync(g),s=Object.values(c).map(e=>e.split("_")[0]);for(const t of e){if(t===`project_${_}.json`)continue;const e=t.replace(/\.(sh|csv)$/,"");if(!s.includes(e)){const e=path.join(g,t);console.log(`Removendo arquivo obsoleto: ${e}`),fs.unlinkSync(e)}}}catch(e){console.error("Erro ao limpar arquivos obsoletos:",e)}s.json({message:"Projeto salvo com sucesso - arquivos sobrescritos",savePath:g,projectKey:_,savedAt:(new Date).toISOString()})}),app.get("/api/load-project/:projectKey",authenticateToken,(e,s)=>{try{if(!e.user||!e.user.userId)return console.error("ERRO: Tentativa de carregar projeto sem autenticação válida."),s.status(401).json({error:"Usuário não autenticado corretamente."});const{projectKey:t}=e.params,r=t.trim().replace(/[^a-zA-Z0-9-_]/g,"_"),a=e.user.userId,i=path.join(__dirname,"saves",a,r),o=path.join(i,`project_${r}.json`);if(!fs.existsSync(o))return console.warn(`Projeto não encontrado para o usuário ${a} no caminho: ${o}`),s.status(404).json({error:"Arquivo de projeto não encontrado."});const n=fs.readFileSync(o,"utf8"),c=JSON.parse(n);s.json(c)}catch(t){console.error(`ERRO CRÍTICO ao carregar o projeto ${e.params.projectKey}:`,t),s.status(500).json({error:"Erro interno do servidor."})}}),app.get("/api/projects",authenticateToken,(e,s)=>{const t=e.user.userId,r=path.join(__dirname,"saves",t);if(!fs.existsSync(r))return s.json({projects:[]});try{const e=fs.readdirSync(r,{withFileTypes:!0}).filter(e=>e.isDirectory()).map(e=>e.name),t=[];for(const s of e){const e=path.join(r,s),a=path.join(e,`project_${s}.json`);let i=s;if(fs.existsSync(a))try{i=JSON.parse(fs.readFileSync(a,"utf8")).projectName||s}catch(e){console.error(`Erro ao ler projeto ${s}:`,e)}const o=fs.readdirSync(e).filter(e=>e!==`project_${s}.json`).sort();t.push({projectKey:s,projectName:i,files:o,lastModified:fs.statSync(e).mtime})}t.sort((e,s)=>new Date(s.lastModified)-new Date(e.lastModified)),s.json({projects:t})}catch(e){console.error("Erro ao listar projetos:",e),s.status(500).json({error:"Erro ao listar projetos"})}}),app.get("/api/projects/:projectKey/files/:fileName",authenticateToken,(e,s)=>{const{projectKey:t,fileName:r}=e.params,a=t.trim().replace(/[^a-zA-Z0-9-_]/g,"_"),i=r.replace(/[^a-zA-Z0-9._-]/g,"_"),o=e.user.userId,n=path.join(__dirname,"saves",o,a,i);if(!fs.existsSync(n))return s.status(404).json({error:"Arquivo não encontrado"});try{const e=path.extname(i).toLowerCase();let t="application/octet-stream";switch(e){case".sh":t="application/x-sh";break;case".csv":t="text/csv";break;case".json":t="application/json";break;case".txt":t="text/plain"}s.setHeader("Content-Type",t),s.setHeader("Content-Disposition",`attachment; filename="${i}"`);const r=fs.createReadStream(n);r.pipe(s),r.on("error",e=>{console.error("Erro ao enviar arquivo:",e),s.headersSent||s.status(500).json({error:"Erro ao baixar arquivo"})})}catch(e){console.error("Erro ao processar download:",e),s.status(500).json({error:"Erro ao processar download"})}}),app.get("/api/projects/:projectKey/download",authenticateToken,(e,s)=>{const{projectKey:t}=e.params,r=t.trim().replace(/[^a-zA-Z0-9-_]/g,"_"),a=e.user.userId,i=path.join(__dirname,"saves",a,r);if(!fs.existsSync(i))return s.status(404).json({error:"Projeto não encontrado"});try{const e=require("archiver")("zip",{zlib:{level:9}});s.setHeader("Content-Type","application/zip"),s.setHeader("Content-Disposition",`attachment; filename="${r}.zip"`),e.pipe(s),e.directory(i,!1),e.finalize(),e.on("error",e=>{console.error("Erro ao criar ZIP:",e),s.headersSent||s.status(500).json({error:"Erro ao criar arquivo ZIP"})})}catch(e){console.error("Erro ao processar download do projeto:",e),s.status(500).json({error:"Erro ao processar download do projeto"})}}),app.delete("/api/projects/:projectKey",authenticateToken,(e,s)=>{const{projectKey:t}=e.params,r=t.trim().replace(/[^a-zA-Z0-9-_]/g,"_"),a=e.user.userId,i=path.join(__dirname,"saves",a,r);if(!fs.existsSync(i))return s.status(404).json({error:"Projeto não encontrado"});try{!function e(s){if(fs.existsSync(s)){const t=fs.readdirSync(s);for(const r of t){const t=path.join(s,r);fs.statSync(t).isDirectory()?e(t):fs.unlinkSync(t)}fs.rmdirSync(s)}}(i),s.json({message:"Projeto deletado com sucesso",projectKey:r})}catch(e){console.error("Erro ao deletar projeto:",e),s.status(500).json({error:"Erro ao deletar projeto"})}}),app.delete("/api/projects/:projectKey/files/:fileName",authenticateToken,(e,s)=>{const{projectKey:t,fileName:r}=e.params,a=t.trim().replace(/[^a-zA-Z0-9-_]/g,"_"),i=r.replace(/[^a-zA-Z0-9._-]/g,"_"),o=e.user.userId,n=path.join(__dirname,"saves",o,a,i);if(!fs.existsSync(n))return s.status(404).json({error:"Arquivo não encontrado"});try{fs.unlinkSync(n),s.json({message:"Arquivo deletado com sucesso",fileName:i})}catch(e){console.error("Erro ao deletar arquivo:",e),s.status(500).json({error:"Erro ao deletar arquivo"})}});try{require("archiver")}catch(e){console.warn("Archiver não instalado. Execute: npm install archiver")}app.get("/",(e,s)=>{s.status(200).json({message:"Welcome to the FlowMon API!",status:"Server is running correctly.",timestamp:(new Date).toISOString()})}),app.listen(3001,()=>{console.log("🚀 Server running on http://localhost:3001")});