const{Sequelize:Sequelize,DataTypes:DataTypes}=require("sequelize"),bcrypt=require("bcryptjs"),sequelize=new Sequelize(process.env.DB_NAME,process.env.DB_USER,process.env.DB_PASSWORD,{host:process.env.DB_HOST,port:process.env.DB_PORT,dialect:"postgres",logging:!1}),User=sequelize.define("User",{id:{type:DataTypes.UUID,defaultValue:DataTypes.UUIDV4,primaryKey:!0},username:{type:DataTypes.STRING,allowNull:!1,unique:!0},password:{type:DataTypes.STRING,allowNull:!1}},{hooks:{beforeCreate:async e=>{e.password=await bcrypt.hash(e.password,10)},beforeUpdate:async e=>{e.changed("password")&&(e.password=await bcrypt.hash(e.password,10))}}}),initializeDatabase=async()=>{try{await sequelize.authenticate(),console.log("Database connection successfully established."),await sequelize.sync({force:!1}),console.log("Models synchronized with the database.");const e=[{username:"admin",password:"admin_password"},{username:"user",password:"user_password"}];for(const s of e){await User.findOne({where:{username:s.username}})?console.log(`Standard user '${s.username}' already exists.`):(await User.create(s),console.log(`Standard user '${s.username}' created.`))}}catch(e){console.error("The database could not be connected or synchronized:",e)}};module.exports={User:User,sequelize:sequelize,initializeDatabase:initializeDatabase};